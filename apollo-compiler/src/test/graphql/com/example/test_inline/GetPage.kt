// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.test_inline

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import kotlin.Array
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
class GetPage : Query<GetPage.Data, GetPage.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  interface CollectionCollection {
    fun marshaller(): ResponseFieldMarshaller
  }

  interface ItemItem {
    fun marshaller(): ResponseFieldMarshaller
  }

  data class AsParticularItem(
    val __typename: String = "ParticularItem",
    val image: String
  ) : ItemItem {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@AsParticularItem.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@AsParticularItem.image)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("image", "image", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): AsParticularItem = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val image = readString(RESPONSE_FIELDS[1])!!
        AsParticularItem(
          __typename = __typename,
          image = image
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<AsParticularItem> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Item(
    val __typename: String = "Item",
    val title: String,
    val asParticularItem: AsParticularItem?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Item.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Item.title)
      writer.writeFragment(this@Item.asParticularItem?.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("title", "title", null, false, null),
          ResponseField.forFragment("__typename", "__typename", listOf(
            ResponseField.Condition.typeCondition(arrayOf("ParticularItem"))
          ))
          )

      operator fun invoke(reader: ResponseReader): Item = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val title = readString(RESPONSE_FIELDS[1])!!
        val asParticularItem = readFragment<AsParticularItem>(RESPONSE_FIELDS[2]) { reader ->
          AsParticularItem(reader)
        }
        Item(
          __typename = __typename,
          title = title,
          asParticularItem = asParticularItem
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Item> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class AsParticularCollection(
    val __typename: String = "ParticularCollection",
    val items: List<Item>
  ) : CollectionCollection {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@AsParticularCollection.__typename)
      writer.writeList(RESPONSE_FIELDS[1], this@AsParticularCollection.items) { value,
          listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value.marshaller())}
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forList("items", "items", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): AsParticularCollection = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val items = readList<Item>(RESPONSE_FIELDS[1]) { reader ->
          reader.readObject<Item> { reader ->
            Item(reader)
          }
        }!!.map { it!! }
        AsParticularCollection(
          __typename = __typename,
          items = items
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<AsParticularCollection> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Item1(
    val __typename: String = "Item",
    val title: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Item1.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Item1.title)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("title", "title", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Item1 = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val title = readString(RESPONSE_FIELDS[1])!!
        Item1(
          __typename = __typename,
          title = title
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Item1> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Collection(
    val __typename: String = "Collection",
    val items: List<Item1>,
    val asParticularCollection: AsParticularCollection?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Collection.__typename)
      writer.writeList(RESPONSE_FIELDS[1], this@Collection.items) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value.marshaller())}
      }
      writer.writeFragment(this@Collection.asParticularCollection?.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forList("items", "items", null, false, null),
          ResponseField.forFragment("__typename", "__typename", listOf(
            ResponseField.Condition.typeCondition(arrayOf("ParticularCollection"))
          ))
          )

      operator fun invoke(reader: ResponseReader): Collection = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val items = readList<Item1>(RESPONSE_FIELDS[1]) { reader ->
          reader.readObject<Item1> { reader ->
            Item1(reader)
          }
        }!!.map { it!! }
        val asParticularCollection = readFragment<AsParticularCollection>(RESPONSE_FIELDS[2]) {
            reader ->
          AsParticularCollection(reader)
        }
        Collection(
          __typename = __typename,
          items = items,
          asParticularCollection = asParticularCollection
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Collection> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    val collection: Collection
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.collection.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("collection", "collection", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val collection = readObject<Collection>(RESPONSE_FIELDS[0]) { reader ->
          Collection(reader)
        }!!
        Data(
          collection = collection
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "09c2f7755e4c0be866863ec0d0af37acd3cdedf89bb6384d838019477611707e"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query GetPage {
          |  collection {
          |    __typename
          |    items {
          |      __typename
          |      title
          |    }
          |    ... on ParticularCollection {
          |      items {
          |        __typename
          |        ... on ParticularItem {
          |          image
          |        }
          |      }
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "GetPage"
    }
  }
}
