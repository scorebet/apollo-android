// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.root_query_fragment_with_nested_fragments.fragment

import com.apollographql.apollo.api.GraphqlFragment
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import kotlin.Array
import kotlin.String
import kotlin.Suppress

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class QueryFragment(
  val __typename: String = "Query",
  val hero: Hero?,
  val droid: Droid?,
  val human: Human?
) : GraphqlFragment {
  override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
    writer.writeString(RESPONSE_FIELDS[0], this@QueryFragment.__typename)
    writer.writeObject(RESPONSE_FIELDS[1], this@QueryFragment.hero?.marshaller())
    writer.writeObject(RESPONSE_FIELDS[2], this@QueryFragment.droid?.marshaller())
    writer.writeObject(RESPONSE_FIELDS[3], this@QueryFragment.human?.marshaller())
  }

  companion object {
    private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
        ResponseField.forString("__typename", "__typename", null, false, null),
        ResponseField.forObject("hero", "hero", null, true, null),
        ResponseField.forObject("droid", "droid", mapOf<String, Any>(
          "id" to "1"), true, null),
        ResponseField.forObject("human", "human", mapOf<String, Any>(
          "id" to "1"), true, null)
        )

    val FRAGMENT_DEFINITION: String = """
        |fragment QueryFragment on Query {
        |  __typename
        |  hero {
        |    __typename
        |    ...heroFragment
        |  }
        |  droid(id: 1) {
        |    __typename
        |    ...droidFragment
        |  }
        |  human(id: 1) {
        |    __typename
        |    ... on Human {
        |      name
        |      homePlanet
        |    }
        |  }
        |}
        """.trimMargin()

    operator fun invoke(reader: ResponseReader): QueryFragment = reader.run {
      val __typename = readString(RESPONSE_FIELDS[0])!!
      val hero = readObject<Hero>(RESPONSE_FIELDS[1]) { reader ->
        Hero(reader)
      }
      val droid = readObject<Droid>(RESPONSE_FIELDS[2]) { reader ->
        Droid(reader)
      }
      val human = readObject<Human>(RESPONSE_FIELDS[3]) { reader ->
        Human(reader)
      }
      QueryFragment(
        __typename = __typename,
        hero = hero,
        droid = droid,
        human = human
      )
    }

    @Suppress("FunctionName")
    fun Mapper(): ResponseFieldMapper<QueryFragment> = ResponseFieldMapper { invoke(it) }
  }

  /**
   * A character from the Star Wars universe
   */
  data class Hero(
    val __typename: String = "Character",
    val fragments: Fragments
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Hero.__typename)
      this@Hero.fragments.marshaller().marshal(writer)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("__typename", "__typename", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Hero = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val fragments = Fragments(reader)
        Hero(
          __typename = __typename,
          fragments = fragments
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Hero> = ResponseFieldMapper { invoke(it) }
    }

    data class Fragments(
      val heroFragment: HeroFragment
    ) {
      fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
        writer.writeFragment(this@Fragments.heroFragment.marshaller())
      }

      companion object {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.forFragment("__typename", "__typename", null)
            )

        operator fun invoke(reader: ResponseReader): Fragments = reader.run {
          val heroFragment = readFragment<HeroFragment>(RESPONSE_FIELDS[0]) { reader ->
            HeroFragment(reader)
          }!!
          Fragments(
            heroFragment = heroFragment
          )
        }

        @Suppress("FunctionName")
        fun Mapper(): ResponseFieldMapper<Fragments> = ResponseFieldMapper { invoke(it) }
      }
    }
  }

  /**
   * An autonomous mechanical character in the Star Wars universe
   */
  data class Droid(
    val __typename: String = "Droid",
    val fragments: Fragments
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Droid.__typename)
      this@Droid.fragments.marshaller().marshal(writer)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("__typename", "__typename", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Droid = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val fragments = Fragments(reader)
        Droid(
          __typename = __typename,
          fragments = fragments
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Droid> = ResponseFieldMapper { invoke(it) }
    }

    data class Fragments(
      val droidFragment: DroidFragment
    ) {
      fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
        writer.writeFragment(this@Fragments.droidFragment.marshaller())
      }

      companion object {
        private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
            ResponseField.forFragment("__typename", "__typename", null)
            )

        operator fun invoke(reader: ResponseReader): Fragments = reader.run {
          val droidFragment = readFragment<DroidFragment>(RESPONSE_FIELDS[0]) { reader ->
            DroidFragment(reader)
          }!!
          Fragments(
            droidFragment = droidFragment
          )
        }

        @Suppress("FunctionName")
        fun Mapper(): ResponseFieldMapper<Fragments> = ResponseFieldMapper { invoke(it) }
      }
    }
  }

  /**
   * A humanoid creature from the Star Wars universe
   */
  data class Human(
    val __typename: String = "Human",
    /**
     * What this human calls themselves
     */
    val name: String,
    /**
     * The home planet of the human, or null if unknown
     */
    val homePlanet: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Human.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Human.name)
      writer.writeString(RESPONSE_FIELDS[2], this@Human.homePlanet)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("name", "name", null, false, null),
          ResponseField.forString("homePlanet", "homePlanet", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Human = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val name = readString(RESPONSE_FIELDS[1])!!
        val homePlanet = readString(RESPONSE_FIELDS[2])
        Human(
          __typename = __typename,
          name = name,
          homePlanet = homePlanet
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Human> = ResponseFieldMapper { invoke(it) }
    }
  }
}
