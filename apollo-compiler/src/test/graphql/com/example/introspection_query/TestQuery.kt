// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.introspection_query

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ResponseFieldMapper
import com.apollographql.apollo.api.ResponseFieldMarshaller
import com.apollographql.apollo.api.ResponseReader
import com.apollographql.apollo.internal.QueryDocumentMinifier
import kotlin.Array
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
class TestQuery : Query<TestQuery.Data, TestQuery.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper {
    Data(it)
  }

  data class QueryType(
    val __typename: String,
    val name: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller {
      it.writeString(RESPONSE_FIELDS[0], __typename)
      it.writeString(RESPONSE_FIELDS[1], name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("name", "name", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): QueryType {
        val __typename = reader.readString(RESPONSE_FIELDS[0])
        val name = reader.readString(RESPONSE_FIELDS[1])
        return QueryType(
          __typename = __typename,
          name = name
        )
      }
    }
  }

  data class Type(
    val __typename: String,
    val name: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller {
      it.writeString(RESPONSE_FIELDS[0], __typename)
      it.writeString(RESPONSE_FIELDS[1], name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("name", "name", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Type {
        val __typename = reader.readString(RESPONSE_FIELDS[0])
        val name = reader.readString(RESPONSE_FIELDS[1])
        return Type(
          __typename = __typename,
          name = name
        )
      }
    }
  }

  data class __Schema(
    val __typename: String,
    /**
     * The type that query operations will be rooted at.
     */
    val queryType: QueryType,
    /**
     * A list of all types supported by this server.
     */
    val types: List<Type>
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller {
      it.writeString(RESPONSE_FIELDS[0], __typename)
      it.writeObject(RESPONSE_FIELDS[1], queryType.marshaller())
      it.writeList(RESPONSE_FIELDS[2], types) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())
        }
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forObject("queryType", "queryType", null, false, null),
          ResponseField.forList("types", "types", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): __Schema {
        val __typename = reader.readString(RESPONSE_FIELDS[0])
        val queryType = reader.readObject<QueryType>(RESPONSE_FIELDS[1]) { reader ->
          QueryType(reader)
        }

        val types = reader.readList<Type>(RESPONSE_FIELDS[2]) {
          it.readObject<Type> { reader ->
            Type(reader)
          }

        }
        return __Schema(
          __typename = __typename,
          queryType = queryType,
          types = types
        )
      }
    }
  }

  data class __Type(
    val __typename: String,
    val name: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller {
      it.writeString(RESPONSE_FIELDS[0], __typename)
      it.writeString(RESPONSE_FIELDS[1], name)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("name", "name", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): __Type {
        val __typename = reader.readString(RESPONSE_FIELDS[0])
        val name = reader.readString(RESPONSE_FIELDS[1])
        return __Type(
          __typename = __typename,
          name = name
        )
      }
    }
  }

  data class Data(
    val __schema: __Schema,
    val __type: __Type?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller {
      it.writeObject(RESPONSE_FIELDS[0], __schema.marshaller())
      it.writeObject(RESPONSE_FIELDS[1], __type?.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("__schema", "__schema", null, false, null),
          ResponseField.forObject("__type", "__type", mapOf<String, Any>(
            "name" to "Vehicle"), true, null)
          )

      operator fun invoke(reader: ResponseReader): Data {
        val __schema = reader.readObject<__Schema>(RESPONSE_FIELDS[0]) { reader ->
          __Schema(reader)
        }

        val __type = reader.readObject<__Type>(RESPONSE_FIELDS[1]) { reader ->
          __Type(reader)
        }

        return Data(
          __schema = __schema,
          __type = __type
        )
      }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "08518fde8892d59c699c4d48f384d7199d933a5846e6936d910cb492b8f84684"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query TestQuery {
          |  __schema {
          |    __typename
          |    queryType {
          |      __typename
          |      name
          |    }
          |    types {
          |      __typename
          |      name
          |    }
          |  }
          |  __type(name: "Vehicle") {
          |    __typename
          |    name
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = OperationName { "TestQuery" }
  }
}
